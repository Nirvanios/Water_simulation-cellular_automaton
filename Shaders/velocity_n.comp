#version 450


#define NO_FLAG 0
#define CELL_SOLID 1
#define CELL_SOURCE 2
#define CELL_SINK 4
#define FLOW_DOWN 8

struct CellData{
    vec3 velocity;
    float fluidVolume;
};

struct CellInfo{
    float fluidVerticalLefover;
    int flags;
};

layout(local_size_x = 2, local_size_y = 2, local_size_z = 2) in;
layout(std430, binding=0) buffer WriteBuffer{
    CellData writeCells[];
};
layout(std430, binding=1) buffer ReadBuffer{
    CellData readCells[];
};
layout(std430, binding=2) buffer InfoBuffer{
    CellInfo infoCells[];
};

uvec3 globalSize = uvec3(gl_NumWorkGroups.x * gl_WorkGroupSize.x, gl_NumWorkGroups.y * gl_WorkGroupSize.y, gl_NumWorkGroups.z * gl_WorkGroupSize.z);

const float maximumCellVolume = 1.0;
const float minimumCellVolume = 0.005;
const float maximumCompression = 0.0;
const float maximumFlow = 4.0f;
const uint verticalNeighbourSize = 4;
const ivec3 neighbourOffsets[4] = { ivec3(-1, 0, 0), ivec3(1, 0, 0), ivec3(0, 0, -1), ivec3(0, 0, 1) };

int to1DCoord(uvec3 coord){
    return int(coord.z * globalSize.x * globalSize.y + coord.y * globalSize.x + coord.x);
}

const float waterWeight = 1;
const float timeStep = 0.01;
float getDragCoefficient() {
    return 0.99;
}

vec3 getGlobalForces() {
    vec3 gravity = vec3(0, -9.81, 0);
    vec3 current = vec3(0, 0, 0);
    return (gravity + current) * timeStep;
}

bool isFull(float volume) {
    return volume >= 1.0f;
}

float getRatioNeighbor(CellData currentCell, CellData neighbor) {
    return (currentCell.fluidVolume + neighbor.fluidVolume) / neighbor.fluidVolume;
}


#define LEFT 0
#define RIGHT 1
#define UP 2
#define DOWN 3
#define FRONT 4
#define BACK 5
float getNeighborVel(CellData cell, int direction) {
    switch (direction) {
        case LEFT:
        return float(cell.velocity.x < 0) * cell.velocity.x;
        case RIGHT:
        return float(cell.velocity.x > 0) * cell.velocity.x;
        case UP:
        return float(cell.velocity.y > 0) * cell.velocity.y;
        case DOWN:
        return float(cell.velocity.y < 0) * cell.velocity.y;
        case FRONT:
        return float(cell.velocity.z < 0) * cell.velocity.z;
        case BACK:
        return float(cell.velocity.z > 0) * cell.velocity.z;
    }
    return 0;
}

bool isFlagSet(int flags, int flag) {
    return (flags & flag) == flag;
}

void main() {
    uvec3 globalSize = uvec3(gl_NumWorkGroups.x * gl_WorkGroupSize.x, gl_NumWorkGroups.y * gl_WorkGroupSize.y, gl_NumWorkGroups.z * gl_WorkGroupSize.z);
    uint myCellID = (gl_GlobalInvocationID.z * globalSize.x * globalSize.y)+ (gl_GlobalInvocationID.y * globalSize.x) + gl_GlobalInvocationID.x;
    uint invocationCount = globalSize.x * globalSize.y * globalSize.z;
    if (myCellID >= invocationCount){
        return;
    }



    uint upperCellID = gl_GlobalInvocationID.z * globalSize.x * globalSize.y + (gl_GlobalInvocationID.y + 1) * globalSize.x + gl_GlobalInvocationID.x;
    uint bottomCellID = gl_GlobalInvocationID.z * globalSize.x * globalSize.y + (gl_GlobalInvocationID.y - 1) * globalSize.x + gl_GlobalInvocationID.x;
    uint frontCellID = (gl_GlobalInvocationID.z - 1) * globalSize.x * globalSize.y + globalSize.x + gl_GlobalInvocationID.x;
    uint backCellID = (gl_GlobalInvocationID.z + 1) * globalSize.x * globalSize.y + globalSize.x + gl_GlobalInvocationID.x;
    uint leftCellID =  gl_GlobalInvocationID.z * globalSize.x * globalSize.y + globalSize.x + gl_GlobalInvocationID.x - 1;
    uint rightCellID = gl_GlobalInvocationID.z * globalSize.x * globalSize.y + globalSize.x + gl_GlobalInvocationID.x + 1;

    writeCells[myCellID].velocity = (readCells[myCellID].velocity + getGlobalForces());
    writeCells[myCellID].velocity += getRatioNeighbor(readCells[myCellID], readCells[rightCellID]) * getNeighborVel(readCells[rightCellID], LEFT);
    writeCells[myCellID].velocity += getRatioNeighbor(readCells[myCellID], readCells[leftCellID]) * getNeighborVel(readCells[leftCellID], RIGHT);
    writeCells[myCellID].velocity += getRatioNeighbor(readCells[myCellID], readCells[backCellID]) * getNeighborVel(readCells[backCellID], FRONT);
    writeCells[myCellID].velocity += getRatioNeighbor(readCells[myCellID], readCells[frontCellID]) * getNeighborVel(readCells[frontCellID], BACK);
    writeCells[myCellID].velocity += getRatioNeighbor(readCells[myCellID], readCells[bottomCellID]) * getNeighborVel(readCells[bottomCellID], UP);
    writeCells[myCellID].velocity += getRatioNeighbor(readCells[myCellID], readCells[upperCellID]) * getNeighborVel(readCells[upperCellID], DOWN);
    writeCells[myCellID].velocity *= getDragCoefficient();
    writeCells[myCellID].velocity *= float(isFlagSet(infoCells[myCellID].flags, CELL_SOLID));

}