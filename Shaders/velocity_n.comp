#version 450


#define NO_FLAG 0
#define CELL_SOLID 1
#define CELL_SOURCE 2
#define CELL_SINK 4
#define FLOW_DOWN 8

struct CellData{
    vec3 velocity;
    float fluidVolume;
};

struct CellInfo{
    vec4 reflectA;
    vec4 reflectB;
    int flags;
    float _padding[3];
};

layout(local_size_x = 4,
local_size_y = 4,
local_size_z = 4
) in;
layout(std430, binding=0) buffer WriteBuffer{
    CellData writeCells[];
};
layout(std430, binding=1) buffer ReadBuffer{
    CellData readCells[];
};
layout(std430, binding=2) buffer InfoBuffer{
    CellInfo infoCells[];
};

layout(location = 0) uniform uvec3 globalSize;

const float maximumCellVolume = 1.0;
const float minimumCellVolume = 0.005;
const float maximumCompression = 0.0;
const float maximumFlow = 4.0f;
const uint verticalNeighbourSize = 4;
const ivec3 neighbourOffsets[4] = { ivec3(-1, 0, 0), ivec3(1, 0, 0), ivec3(0, 0, -1), ivec3(0, 0, 1) };

int to1DCoord(uvec3 coord){
    return int(coord.z * globalSize.x * globalSize.y + coord.y * globalSize.x + coord.x);
}


const float timeStep = 0.01f;
float getDragCoefficient() {
    return 0.9;
}

vec3 getGlobalForces() {
    vec3 gravity = vec3(0, -9.81, 0);
    vec3 current = vec3(0, 0, 0);
    return (gravity + current) * timeStep;
}

bool isFull(float volume) {
    return volume >= 1.0f;
}


    #define LEFT 0
    #define RIGHT 1
    #define UP 2
    #define DOWN 3
    #define FRONT 4
    #define BACK 5

bool isFlagSet(int flags, int flag) {
    return (flags & flag) == flag;
}

vec3 reflectVelocity(vec3 velocity, vec3  normal) {
    vec3 reflected = reflect(velocity, normal);
    return reflected;
}

uint upperCellID = gl_GlobalInvocationID.z * globalSize.x * globalSize.y + (gl_GlobalInvocationID.y + 1) * globalSize.x + gl_GlobalInvocationID.x;
uint bottomCellID = gl_GlobalInvocationID.z * globalSize.x * globalSize.y + (gl_GlobalInvocationID.y - 1) * globalSize.x + gl_GlobalInvocationID.x;
uint frontCellID = (gl_GlobalInvocationID.z - 1) * globalSize.x * globalSize.y + gl_GlobalInvocationID.y * globalSize.x + gl_GlobalInvocationID.x;
uint backCellID = (gl_GlobalInvocationID.z + 1) * globalSize.x * globalSize.y + gl_GlobalInvocationID.y * globalSize.x + gl_GlobalInvocationID.x;
uint leftCellID =  gl_GlobalInvocationID.z * globalSize.x * globalSize.y + gl_GlobalInvocationID.y * globalSize.x + gl_GlobalInvocationID.x - 1;
uint rightCellID = gl_GlobalInvocationID.z * globalSize.x * globalSize.y + gl_GlobalInvocationID.y * globalSize.x + gl_GlobalInvocationID.x + 1;

#define LEFT_ID leftCellID
#define RIGHT_ID rightCellID
#define UP_ID upperCellID
#define DOWN_ID bottomCellID
#define FRONT_ID frontCellID
#define BACK_ID backCellID

uint dirToID[6] = {
LEFT_ID,
RIGHT_ID,
UP_ID,
DOWN_ID,
FRONT_ID,
BACK_ID
};


const vec3 normals[6] = {
vec3(-1, 0, 0),
vec3(1, 0, 0),
vec3(0, 1, 0),
vec3(0, -1, 0),
vec3(0, 0, 1),
vec3(0, 0, -1)
};

const vec3 spreadDirs[6] = {
vec3(0, 1, 1),
vec3(0, 1, 1),
vec3(1, 0, 1),
vec3(1, 0, 1),
vec3(1, 1, 0),
vec3(1, 1, 0)
};

vec3 getSpread(int direction, vec3 velocity) {
    const float spreadValue = length(velocity) / 4;
    return spreadDirs[direction] * spreadValue;
}

bool intersectsPlane(vec3 normal, vec3 direction) {
    float denom = dot(normal, direction);
    return abs(denom) > 0.00001f;
}

float positive(float value) {
    return value * float(value > 0);
}

vec3 positive(vec3 value) {
    return vec3(positive(value.x), positive(value.y), positive(value.z));
}

float negative(float value) {
    return value * float(value < 0);
}

vec3 negative(vec3 value) {
    return vec3(negative(value.x), negative(value.y), negative(value.z));
}


void main() {
    uint myCellID = (gl_GlobalInvocationID.z * globalSize.x * globalSize.y)+ (gl_GlobalInvocationID.y * globalSize.x) + gl_GlobalInvocationID.x;
    uint invocationCount = globalSize.x * globalSize.y * globalSize.z;
    if (myCellID >= invocationCount){
        return;
    }
    writeCells[myCellID].velocity = readCells[myCellID].velocity * getDragCoefficient();

    int cntUsed = 0;
    vec3 reflect = vec3(0);
    infoCells[myCellID].reflectA = vec4(0);
    infoCells[myCellID].reflectB = vec4(0);

    const float extraFluid = max(0, readCells[myCellID].fluidVolume - maximumCellVolume);
    const float innerPressure = extraFluid;
    vec3 tmpReflectA = vec3(innerPressure);
    vec3 tmpReflectB = vec3(-innerPressure);
    for (int i = 0; i < 6; ++i) {
        const uint neighborID = dirToID[i];
        if (isFlagSet(infoCells[neighborID].flags, CELL_SOLID)
        || readCells[neighborID].fluidVolume >= maximumCellVolume) {
            const float reflectModifierMultiplier = 0.1f;
            const float reflectModifier = reflectModifierMultiplier * float(isFlagSet(infoCells[neighborID].flags, CELL_SOLID))
            + reflectModifierMultiplier * float(readCells[neighborID].fluidVolume >= maximumCellVolume);
            if (intersectsPlane(writeCells[myCellID].velocity, normals[i])) {
                reflect = reflectVelocity(writeCells[myCellID].velocity, normals[i]);
            } else {
                continue;//reflect = writeCells[myCellID].velocity;
            }
            tmpReflectA += positive(reflect) * reflectModifier;
            tmpReflectB += negative(reflect) * reflectModifier;

            tmpReflectA += getSpread(i, reflect);
            tmpReflectB -= getSpread(i, reflect);
            ++cntUsed;
        }
    }
    if (cntUsed > 0) {
        infoCells[myCellID].reflectA.xyz += tmpReflectA;
        infoCells[myCellID].reflectB.xyz += tmpReflectB;
        infoCells[myCellID].reflectA.xyz /= cntUsed;
        infoCells[myCellID].reflectB.xyz /= cntUsed;
        writeCells[myCellID].velocity = vec3(0);
    }
    writeCells[myCellID].velocity += getGlobalForces();
    writeCells[myCellID].velocity *= float(!isFlagSet(infoCells[myCellID].flags, CELL_SOLID) && readCells[myCellID].fluidVolume > 0);
}
