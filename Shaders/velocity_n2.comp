#version 450


#define NO_FLAG 0
#define CELL_SOLID 1
#define CELL_SOURCE 2
#define CELL_SINK 4
#define FLOW_DOWN 8

struct CellData{
    vec3 velocity;
    float fluidVolume;
};

struct CellInfo{
    vec4 reflectA;
    vec4 reflectB;
    int flags;
};

layout(local_size_x = 4,
local_size_y = 4,
local_size_z = 4
) in;
layout(std430, binding=0) buffer WriteBuffer{
    CellData writeCells[];
};
layout(std430, binding=1) buffer ReadBuffer{
    CellData readCells[];
};
layout(std430, binding=2) buffer InfoBuffer{
    CellInfo infoCells[];
};

layout(location = 0) uniform uvec3 globalSize;

const float maximumCellVolume = 1.0;
const float minimumCellVolume = 0.005;
const float maximumCompression = 0.0;
const float maximumFlow = 4.0f;
const uint verticalNeighbourSize = 4;
const ivec3 neighbourOffsets[4] = { ivec3(-1, 0, 0), ivec3(1, 0, 0), ivec3(0, 0, -1), ivec3(0, 0, 1) };


bool isFlagSet(int flags, int flag) {
    return (flags & flag) == flag;
}

    #define LEFT 0
    #define RIGHT 1
    #define UP 2
    #define DOWN 3
    #define FRONT 4
    #define BACK 5

uint upperCellID = gl_GlobalInvocationID.z * globalSize.x * globalSize.y + (gl_GlobalInvocationID.y + 1) * globalSize.x + gl_GlobalInvocationID.x;
uint bottomCellID = gl_GlobalInvocationID.z * globalSize.x * globalSize.y + (gl_GlobalInvocationID.y - 1) * globalSize.x + gl_GlobalInvocationID.x;
uint frontCellID = (gl_GlobalInvocationID.z - 1) * globalSize.x * globalSize.y + gl_GlobalInvocationID.y * globalSize.x + gl_GlobalInvocationID.x;
uint backCellID = (gl_GlobalInvocationID.z + 1) * globalSize.x * globalSize.y + gl_GlobalInvocationID.y * globalSize.x + gl_GlobalInvocationID.x;
uint leftCellID =  gl_GlobalInvocationID.z * globalSize.x * globalSize.y + gl_GlobalInvocationID.y * globalSize.x + gl_GlobalInvocationID.x - 1;
uint rightCellID = gl_GlobalInvocationID.z * globalSize.x * globalSize.y + gl_GlobalInvocationID.y * globalSize.x + gl_GlobalInvocationID.x + 1;

#define LEFT_ID leftCellID
#define RIGHT_ID rightCellID
#define UP_ID upperCellID
#define DOWN_ID bottomCellID
#define FRONT_ID frontCellID
#define BACK_ID backCellID

const float waterWeight = 1;

float positive(float value) {
    return value * float(value > 0);
}

vec3 positive(vec3 value) {
    return vec3(positive(value.x), positive(value.y), positive(value.z));
}

float negative(float value) {
    return value * float(value < 0);
}

vec3 negative(vec3 value) {
    return vec3(negative(value.x), negative(value.y), negative(value.z));
}

float sumComponents(vec3 value) {
    return abs(value.x) + abs(value.y) + abs(value.z);
}

void main() {
    uint myCellID = (gl_GlobalInvocationID.z * globalSize.x * globalSize.y)+ (gl_GlobalInvocationID.y * globalSize.x) + gl_GlobalInvocationID.x;
    uint invocationCount = globalSize.x * globalSize.y * globalSize.z;
    if (myCellID >= invocationCount){
        return;
    }

    if ((int(gl_GlobalInvocationID.y) - 1) < 0){
        writeCells[myCellID].velocity.y = 0;
    }
    const vec3 cellVelocity = writeCells[myCellID].velocity;
    const vec3 reflectA = infoCells[myCellID].reflectA.xyz + cellVelocity;
    const vec3 reflectB = infoCells[myCellID].reflectB.xyz + cellVelocity;
    vec3 out_velocityPlus = positive(reflectA);
    vec3 out_velocityMinus = -negative(reflectB);

    float outLength = sumComponents(out_velocityMinus) + sumComponents(out_velocityPlus);
    float outRatio = float(outLength > readCells[myCellID].fluidVolume && outLength != 0)
    * readCells[myCellID].fluidVolume / (outLength + 0.00000000001 * float(outLength == 0))
    + float(outLength <= readCells[myCellID].fluidVolume);
    out_velocityPlus *= outRatio;
    out_velocityMinus *= outRatio;
    outLength *= outRatio;

    out_velocityMinus.y *= float((int(gl_GlobalInvocationID.y) - 1) >= 0) * float(!isFlagSet(infoCells[DOWN_ID].flags, CELL_SOLID));
    out_velocityPlus.y *= float(UP_ID < invocationCount) * float(!isFlagSet(infoCells[UP_ID].flags, CELL_SOLID));
    out_velocityMinus.x *= float((int(gl_GlobalInvocationID.x) - 1) >= 0) * float(!isFlagSet(infoCells[LEFT_ID].flags, CELL_SOLID));
    out_velocityPlus.x *= float(RIGHT_ID < invocationCount) * float(!isFlagSet(infoCells[RIGHT_ID].flags, CELL_SOLID));
    out_velocityMinus.z *= float((int(gl_GlobalInvocationID.z) - 1) >= 0) * float(!isFlagSet(infoCells[FRONT_ID].flags, CELL_SOLID));
    out_velocityPlus.z *= float(BACK_ID < invocationCount) * float(!isFlagSet(infoCells[BACK_ID].flags, CELL_SOLID));

    out_velocityMinus.y *= float(readCells[DOWN_ID].fluidVolume < maximumCellVolume);
    out_velocityPlus.y *= float(readCells[UP_ID].fluidVolume < maximumCellVolume);
    out_velocityMinus.x *= float(readCells[LEFT_ID].fluidVolume < maximumCellVolume);
    out_velocityPlus.x *= float(readCells[RIGHT_ID].fluidVolume < maximumCellVolume);
    out_velocityMinus.z *= float(readCells[FRONT_ID].fluidVolume < maximumCellVolume);
    out_velocityPlus.z *= float(readCells[BACK_ID].fluidVolume < maximumCellVolume);

    infoCells[myCellID].reflectA = vec4(out_velocityPlus, 0);
    infoCells[myCellID].reflectB = vec4(out_velocityMinus, 0);

    writeCells[myCellID].velocity += -out_velocityMinus + out_velocityPlus;
    writeCells[myCellID].fluidVolume = max(readCells[myCellID].fluidVolume - (sumComponents(out_velocityMinus) + sumComponents(out_velocityPlus)), 0);
}
