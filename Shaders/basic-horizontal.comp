#version 450

#define NO_FLAG 0
#define CELL_SOLID 1
#define CELL_SOURCE 2
#define CELL_SINK 4
#define FLOW_DOWN 8

struct CellData{
    vec3 velocity;
    float fluidVolume;
};

struct CellInfo{
    float fluidVerticalLefover;
    int flags;
};

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;
layout(std430, binding=0) buffer WriteBuffer{
    CellData writeCells[];
};
layout(std430, binding=1) buffer ReadBuffer{
    CellData readCells[];
};
layout(std430, binding=2) buffer InfoBuffer{
    CellInfo infoCells[];
};

uvec3 globalSize = uvec3(gl_NumWorkGroups.x * gl_WorkGroupSize.x, gl_NumWorkGroups.y * gl_WorkGroupSize.y, gl_NumWorkGroups.z * gl_WorkGroupSize.z);

const float maximumCellVolume = 1.0;
const float minimumCellVolume = 0.005;
const float maximumCompression = 0.0;
const float maximumFlow = 4.0f;
const uint verticalNeighbourSize = 4;
const ivec3 neighbourOffsets[4] = { ivec3(-1, 0, 0), ivec3(1, 0, 0), ivec3(0, 0, -1), ivec3(0, 0, 1) };

int to1DCoord(uvec3 coord){
    return int(coord.z * globalSize.x * globalSize.y + coord.y * globalSize.x + coord.x);
}

float horizontalFlowVolume(float sourceFluidVolume, float destinationFluidVolume, float destinationSolidVolume, uint neighborCount){
    if (sourceFluidVolume > destinationFluidVolume + destinationSolidVolume){
        float result = clamp((sourceFluidVolume - destinationFluidVolume)/ float(neighborCount),
        0,
        sourceFluidVolume / float(neighborCount));
        return clamp (result, 0, maximumCellVolume - destinationSolidVolume);
    }
    return 0.0;
}

void main() {
    uint myCellID = (gl_GlobalInvocationID.z * globalSize.x * globalSize.y)+ (gl_GlobalInvocationID.y * globalSize.x) + gl_GlobalInvocationID.x;
    uint invocationCount = globalSize.x * globalSize.y * globalSize.z;
    if (myCellID < invocationCount){
        float mySolidVolume = int((infoCells[myCellID].flags & CELL_SOLID) == CELL_SOLID) * maximumCellVolume;
        float inFlow = 0.0;
        float outFlow = 0.0;

        uint lowerVolumeNeighborCount = 0;
        bool neighborChecks[4];
        for (int offsetIndex = 0; offsetIndex < verticalNeighbourSize; ++offsetIndex){
            ivec3 currentNeighbour = ivec3(gl_GlobalInvocationID) + neighbourOffsets[offsetIndex];
            neighborChecks[offsetIndex] = all(greaterThanEqual(currentNeighbour, ivec3(0))) && all(lessThan(currentNeighbour, globalSize));
            lowerVolumeNeighborCount += uint(neighborChecks[offsetIndex]);
        }
        if (lowerVolumeNeighborCount != 0) {
            for (int offsetIndex = 0; offsetIndex < verticalNeighbourSize; ++offsetIndex){
                ivec3 currentNeighbour = ivec3(gl_GlobalInvocationID) + neighbourOffsets[offsetIndex];
                if (neighborChecks[offsetIndex]) {
                    float neighbourSolidVolume = int((infoCells[to1DCoord(currentNeighbour)].flags & CELL_SOLID) == CELL_SOLID) * maximumCellVolume;
                    inFlow += horizontalFlowVolume(infoCells[to1DCoord(currentNeighbour)].fluidVerticalLefover,
                    readCells[myCellID].fluidVolume,
                    mySolidVolume,
                    lowerVolumeNeighborCount);

                    outFlow += horizontalFlowVolume(infoCells[myCellID].fluidVerticalLefover,
                    readCells[to1DCoord(currentNeighbour)].fluidVolume,
                    neighbourSolidVolume,
                    lowerVolumeNeighborCount);

                }
            }
        }
        writeCells[myCellID].fluidVolume = readCells[myCellID].fluidVolume + (inFlow - outFlow);

        writeCells[myCellID].fluidVolume = writeCells[myCellID].fluidVolume * float(writeCells[myCellID].fluidVolume >= minimumCellVolume);
        if (bool(infoCells[myCellID].flags & CELL_SOURCE)){
            writeCells[myCellID].fluidVolume = maximumCellVolume;
        }
        if (bool(infoCells[myCellID].flags & CELL_SINK)){
            writeCells[myCellID].fluidVolume = 0.0;
        }
    }

}
